<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Ubuntu环境下配置巴斯勒相机及相机测试</title>
    <url>/2019/12/16/Ubuntu%E7%8E%AF%E5%A2%83%E4%B8%8B%E9%85%8D%E7%BD%AE%E5%B7%B4%E6%96%AF%E5%8B%92%E7%9B%B8%E6%9C%BA%E5%8F%8A%E7%9B%B8%E6%9C%BA%E6%B5%8B%E8%AF%95/</url>
    <content><![CDATA[<h4 id="软硬件要求"><a href="#软硬件要求" class="headerlink" title="软硬件要求"></a>软硬件要求</h4><ol>
<li><strong>软件</strong></li>
</ol>
<ul>
<li>VmWare WorkStation Pro</li>
<li>Ubuntu系统镜像</li>
<li>C++IDE: Sublime Text3</li>
<li>C++编译器: gcc 4.8.4</li>
<li>巴斯勒相机SDK: pylon-5.2.0.13457-x86_64</li>
</ul>
<blockquote>
<p>IDE及编译器在Ubuntu系统中可通过系统命令安装，虚拟机、系统镜像及巴斯勒相机SDK可从<a href="">链接</a>处下载</p>
</blockquote>
<ol start="2">
<li><strong>硬件</strong></li>
</ol>
<ul>
<li>巴斯勒相机，型号为Basler acA800-200gc</li>
<li>路由器</li>
</ul>
<h4 id="Ubuntu虚拟系统安装"><a href="#Ubuntu虚拟系统安装" class="headerlink" title="Ubuntu虚拟系统安装"></a>Ubuntu虚拟系统安装</h4><p>运行VmWare WorkStation Pro，点击<strong>创建新的虚拟机</strong></p>
<p><img src="/images/Ubuntu%E7%8E%AF%E5%A2%83%E4%B8%8B%E9%85%8D%E7%BD%AE%E5%B7%B4%E6%96%AF%E5%8B%92%E7%9B%B8%E6%9C%BA%E5%8F%8A%E7%9B%B8%E6%9C%BA%E6%B5%8B%E8%AF%95/CreateVirtualMachine.png" alt="CreateVirtualMachine"></p>
<p>选择自定义，点击下一步</p>
<p><img src="/images/Ubuntu%E7%8E%AF%E5%A2%83%E4%B8%8B%E9%85%8D%E7%BD%AE%E5%B7%B4%E6%96%AF%E5%8B%92%E7%9B%B8%E6%9C%BA%E5%8F%8A%E7%9B%B8%E6%9C%BA%E6%B5%8B%E8%AF%95/Wel1.png" alt="Wel1"></p>
<p>选择<strong>稍后安装操作系统</strong>，点击下一步</p>
<p><img src="/images/Ubuntu%E7%8E%AF%E5%A2%83%E4%B8%8B%E9%85%8D%E7%BD%AE%E5%B7%B4%E6%96%AF%E5%8B%92%E7%9B%B8%E6%9C%BA%E5%8F%8A%E7%9B%B8%E6%9C%BA%E6%B5%8B%E8%AF%95/wel2.jpg" alt="wel2"></p>
<p>选择Linux，Ubuntu版本，点击下一步</p>
<p><img src="/images/Ubuntu%E7%8E%AF%E5%A2%83%E4%B8%8B%E9%85%8D%E7%BD%AE%E5%B7%B4%E6%96%AF%E5%8B%92%E7%9B%B8%E6%9C%BA%E5%8F%8A%E7%9B%B8%E6%9C%BA%E6%B5%8B%E8%AF%95/wel3.jpg" alt="wel3"></p>
<p>为此虚拟机命名，最好不要安装在C盘内，点击下一步</p>
<p><img src="/images/Ubuntu%E7%8E%AF%E5%A2%83%E4%B8%8B%E9%85%8D%E7%BD%AE%E5%B7%B4%E6%96%AF%E5%8B%92%E7%9B%B8%E6%9C%BA%E5%8F%8A%E7%9B%B8%E6%9C%BA%E6%B5%8B%E8%AF%95/wel4.jpg" alt="wel4"></p>
<p><strong>处理器数量</strong>及<strong>每个处理器的内核数量</strong>根据计算机能力选择，不要出现“开启虚拟机将会失败，原因是为该虚拟机配置使用的虚拟处理器内核数量多于主机所支持的数量”即可</p>
<p><img src="/images/Ubuntu%E7%8E%AF%E5%A2%83%E4%B8%8B%E9%85%8D%E7%BD%AE%E5%B7%B4%E6%96%AF%E5%8B%92%E7%9B%B8%E6%9C%BA%E5%8F%8A%E7%9B%B8%E6%9C%BA%E6%B5%8B%E8%AF%95/wel5.jpg" alt="wel5"></p>
<p>内存大小推荐4GB，可用左侧的滑杆选择4GB</p>
<p><img src="/images/Ubuntu%E7%8E%AF%E5%A2%83%E4%B8%8B%E9%85%8D%E7%BD%AE%E5%B7%B4%E6%96%AF%E5%8B%92%E7%9B%B8%E6%9C%BA%E5%8F%8A%E7%9B%B8%E6%9C%BA%E6%B5%8B%E8%AF%95/wel6.jpg" alt="wel6"></p>
<p>在如下页面选择<strong>自定义硬件</strong>，点击<strong>新CD/DVD(SATA)</strong>，在右侧<strong>连接</strong>中选择<strong>使用ISO映像文件(M)</strong>，定位至之前下载好的Ubuntu系统镜像的安装包处，关闭后点击完成，即可创建虚拟机</p>
<p><img src="/images/Ubuntu%E7%8E%AF%E5%A2%83%E4%B8%8B%E9%85%8D%E7%BD%AE%E5%B7%B4%E6%96%AF%E5%8B%92%E7%9B%B8%E6%9C%BA%E5%8F%8A%E7%9B%B8%E6%9C%BA%E6%B5%8B%E8%AF%95/wel7.jpg" alt="wel7"></p>
<p><img src="/images/Ubuntu%E7%8E%AF%E5%A2%83%E4%B8%8B%E9%85%8D%E7%BD%AE%E5%B7%B4%E6%96%AF%E5%8B%92%E7%9B%B8%E6%9C%BA%E5%8F%8A%E7%9B%B8%E6%9C%BA%E6%B5%8B%E8%AF%95/wel8.jpg" alt="wel8"></p>
<p>运行此虚拟机，待运行至如下界面时，左侧语言拉到最下选择<strong>中文(简体)</strong>，再点击右侧<strong>安装Ubuntu</strong></p>
<p><img src="/images/Ubuntu%E7%8E%AF%E5%A2%83%E4%B8%8B%E9%85%8D%E7%BD%AE%E5%B7%B4%E6%96%AF%E5%8B%92%E7%9B%B8%E6%9C%BA%E5%8F%8A%E7%9B%B8%E6%9C%BA%E6%B5%8B%E8%AF%95/wel10.jpg" alt="wel10"></p>
<p>点击继续，在如下界面选择<strong>清除整个磁盘并安装Ubuntu</strong>，点击<strong>现在安装</strong></p>
<p><img src="/images/Ubuntu%E7%8E%AF%E5%A2%83%E4%B8%8B%E9%85%8D%E7%BD%AE%E5%B7%B4%E6%96%AF%E5%8B%92%E7%9B%B8%E6%9C%BA%E5%8F%8A%E7%9B%B8%E6%9C%BA%E6%B5%8B%E8%AF%95/wel11.jpg" alt="wel11"></p>
<p>后续步骤为选择时区、键盘布局及用户信息的选择，最后点击<strong>继续</strong>即可开始安装，等待一段时间即可安装完成</p>
<p><img src="/images/Ubuntu%E7%8E%AF%E5%A2%83%E4%B8%8B%E9%85%8D%E7%BD%AE%E5%B7%B4%E6%96%AF%E5%8B%92%E7%9B%B8%E6%9C%BA%E5%8F%8A%E7%9B%B8%E6%9C%BA%E6%B5%8B%E8%AF%95/wel12.jpg" alt="wel12"></p>
<h4 id="安装c-编译器"><a href="#安装c-编译器" class="headerlink" title="安装c++编译器"></a>安装c++编译器</h4><p>输入代码下载编译器</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install gcc</span><br></pre></td></tr></table></figure>

<p>最后输入<code>gcc --version</code>查看gcc版本</p>
<h4 id="安装Sublime-Text-3及配置C-运行环境"><a href="#安装Sublime-Text-3及配置C-运行环境" class="headerlink" title="安装Sublime Text 3及配置C++运行环境"></a>安装Sublime Text 3及配置C++运行环境</h4><p>个人相对于其他IDE更喜欢Sublime Text 3的界面风格，在Ubuntu系统中下载Sublime Text 3也较为简便，打开终端输入如下命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo add-apt-repository ppa:webupd8team/sublime-text-3</span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt install sublime-text-3</span><br></pre></td></tr></table></figure>

<p>在终端输入<code>subl</code>即可进入Sublime Text，点击<strong>Tools</strong>=&gt;<strong>Build System</strong>=&gt;<strong>New Build System…</strong>，并将这段代码复制进去，保存为C++Compile</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"cmd"</span> : [<span class="string">"g++"</span>, <span class="string">"-std=c++14"</span>, <span class="string">"$file_name"</span>, <span class="string">"-o"</span>, <span class="string">"$&#123;file_base_name&#125;"</span>, <span class="string">"-lm"</span>, <span class="string">"-Wall"</span>],</span><br><span class="line"><span class="attr">"file_regex"</span>: <span class="string">"^(..[^:]*):([0-9]+):?([0-9]+)?:? (.*)$"</span>,</span><br><span class="line"><span class="attr">"selector"</span> : <span class="string">"source.c, source.c++"</span>,</span><br><span class="line"><span class="attr">"shell"</span>:<span class="literal">false</span>,</span><br><span class="line"><span class="attr">"working_dir"</span> : <span class="string">"$file_path"</span>,</span><br><span class="line"></span><br><span class="line"><span class="attr">"variants"</span>:</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"C++Compile_Run"</span>,</span><br><span class="line">        <span class="attr">"cmd"</span>: [<span class="string">"gnome-terminal"</span>, <span class="string">"-e"</span>, <span class="string">"bash -c \"'$&#123;file_path&#125;/$&#123;file_base_name&#125;' ; read -p '\nPress any key to continue...'\""</span>]</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行时选择第二项，即可在终端中输出</p>
<blockquote>
<p>Sublime Text 3存在无法输入中文的情况，解决办法参见<a href="https://www.jianshu.com/p/bf05fb3a4709" target="_blank" rel="noopener">解决Ubuntu下Sublime Text 3无法输入中文</a></p>
</blockquote>
<h4 id="配置巴斯勒相机SDK及代码测试"><a href="#配置巴斯勒相机SDK及代码测试" class="headerlink" title="配置巴斯勒相机SDK及代码测试"></a>配置巴斯勒相机SDK及代码测试</h4><ol>
<li>安装VMware Tools</li>
</ol>
<p>传输文件至虚拟机内需要安装VmWare Tools，在VmWare WorkStation Pro中点击<strong>虚拟机</strong>=&gt;<strong>安装VmWare Tools</strong></p>
<p><img src="/images/Ubuntu%E7%8E%AF%E5%A2%83%E4%B8%8B%E9%85%8D%E7%BD%AE%E5%B7%B4%E6%96%AF%E5%8B%92%E7%9B%B8%E6%9C%BA%E5%8F%8A%E7%9B%B8%E6%9C%BA%E6%B5%8B%E8%AF%95/wel18.jpg" alt="wel18"></p>
<p>系统中会出现VMware Tools文件夹</p>
<p><img src="/images/Ubuntu%E7%8E%AF%E5%A2%83%E4%B8%8B%E9%85%8D%E7%BD%AE%E5%B7%B4%E6%96%AF%E5%8B%92%E7%9B%B8%E6%9C%BA%E5%8F%8A%E7%9B%B8%E6%9C%BA%E6%B5%8B%E8%AF%95/wel19.jpg" alt="wel19"></p>
<p>将文件夹中的压缩文件拷贝至桌面，并在终端中运行<code>cd ~/桌面</code>定位至桌面，输入命令<code>tar  -zxvf  VMwareTools-9.6.0-1294478.tar.gz</code>将压缩包解压至桌面，执行解压后的文件夹中的wmware-install.pl文件，即输入<code>./wmware-install.pl</code>，后面一直按回车即可完成安装</p>
<p><img src="/images/Ubuntu%E7%8E%AF%E5%A2%83%E4%B8%8B%E9%85%8D%E7%BD%AE%E5%B7%B4%E6%96%AF%E5%8B%92%E7%9B%B8%E6%9C%BA%E5%8F%8A%E7%9B%B8%E6%9C%BA%E6%B5%8B%E8%AF%95/wel20.jpg" alt="wel20"></p>
<p>回到VMware WorkStation Pro中，右键点击当前运行的虚拟机，选择<strong>设置</strong>，在<strong>选项</strong>中选择<strong>共享文件夹</strong>，选择右侧的<strong>总是启用</strong>，并在右下中添加本机的文件夹地址，此地址即为windows与虚拟机的共享文件夹地址，点击确定即可，此时在虚拟机/mnt文件夹中出现hgfs文件夹，此文件夹内容即为windows对应文件夹内的内容</p>
<ol start="2">
<li>配置相机SDK</li>
</ol>
<p>将pylon-5.2.0.13457-x86_64.tar.gz的解压缩文件夹放入共享文件夹，可以看到里面有一个SDK压缩包、官方提供的样例文件夹Samples以及其他文件</p>
<p><img src="/images/Ubuntu%E7%8E%AF%E5%A2%83%E4%B8%8B%E9%85%8D%E7%BD%AE%E5%B7%B4%E6%96%AF%E5%8B%92%E7%9B%B8%E6%9C%BA%E5%8F%8A%E7%9B%B8%E6%9C%BA%E6%B5%8B%E8%AF%95/wel13.jpg" alt="wel13"></p>
<p>在虚拟机中将SDK解压缩至/opt下，执行如下命令即可将文件安装至/opt文件夹下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo tar -C /opt -xzf pylonSDK-5.0.1.6388-x86_64.tar.gz</span><br></pre></td></tr></table></figure>

<p>在/opt/pylon5/bin中可运行IpConfigurator查看当前网段内存在的巴斯勒相机设备的ip地址</p>
<p><img src="/images/Ubuntu%E7%8E%AF%E5%A2%83%E4%B8%8B%E9%85%8D%E7%BD%AE%E5%B7%B4%E6%96%AF%E5%8B%92%E7%9B%B8%E6%9C%BA%E5%8F%8A%E7%9B%B8%E6%9C%BA%E6%B5%8B%E8%AF%95/wel14.jpg" alt="wel14"></p>
<p>运行PylonViewerApp可以设置相机参数并查看相机传输的图像</p>
<p><img src="/images/Ubuntu%E7%8E%AF%E5%A2%83%E4%B8%8B%E9%85%8D%E7%BD%AE%E5%B7%B4%E6%96%AF%E5%8B%92%E7%9B%B8%E6%9C%BA%E5%8F%8A%E7%9B%B8%E6%9C%BA%E6%B5%8B%E8%AF%95/wel15.jpg" alt="wel15"></p>
<ol start="3">
<li>代码测试</li>
</ol>
<p>运行巴斯勒公司提供的Samples文件下的代码Grab.cpp，出现无法找到头文件的问题，解决办法是执行<code>make</code>命令，生成可执行文件，再运行即可</p>
<p><img src="/images/Ubuntu%E7%8E%AF%E5%A2%83%E4%B8%8B%E9%85%8D%E7%BD%AE%E5%B7%B4%E6%96%AF%E5%8B%92%E7%9B%B8%E6%9C%BA%E5%8F%8A%E7%9B%B8%E6%9C%BA%E6%B5%8B%E8%AF%95/wel17.jpg" alt="wel17"></p>
<p>在执行<code>make</code>命令前，需要对该文件夹下的MakeFile进行修改，将以下两行代码添加至MakeFile中</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">COMMON+=-l/opt/pylon5/<span class="keyword">include</span></span><br><span class="line">LDFLAGS+=  =L/opt/pylon5/lib64 -lbxapi -lgxapi -lpylonbase -lpylonc -luxapi</span><br></pre></td></tr></table></figure>

<p>执行<code>make</code>即可完成编译，编译后文件夹中生成Grab.o与Grab的可执行文件，最后在IDE中运行即可顺利运行</p>
<p><img src="/images/Ubuntu%E7%8E%AF%E5%A2%83%E4%B8%8B%E9%85%8D%E7%BD%AE%E5%B7%B4%E6%96%AF%E5%8B%92%E7%9B%B8%E6%9C%BA%E5%8F%8A%E7%9B%B8%E6%9C%BA%E6%B5%8B%E8%AF%95/wel16.jpg" alt="wel16"></p>
]]></content>
      <categories>
        <category>Camera Config</category>
      </categories>
      <tags>
        <tag>basler</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu14.04配置pylon及OpenCV并抓取图像显示</title>
    <url>/2019/12/16/Ubuntu%E9%85%8D%E7%BD%AEpylon%E5%8F%8AOpenCV%E5%B9%B6%E6%8A%93%E5%8F%96%E5%9B%BE%E5%83%8F%E6%98%BE%E7%A4%BA/</url>
    <content><![CDATA[<h3 id="软件工具"><a href="#软件工具" class="headerlink" title="软件工具"></a>软件工具</h3><ul>
<li>VMware WorkStations pro</li>
<li>Ubuntu14.04</li>
<li>opencv3.2.0</li>
<li>pylon5.2</li>
<li>硬件Basler相机一台</li>
<li>Qt Creator</li>
</ul>
<h3 id="安装Opencv"><a href="#安装Opencv" class="headerlink" title="安装Opencv"></a>安装Opencv</h3><p>​        Opencv安装可以从官网上直接下载安装，也可以通过下面的方式安装：</p>
<p><strong>1、进入系统后打开命令行，使用wget下载OpenCV源码：</strong></p>
<p>​        url：<a href="https://github.com/Itseez/opencv/archive/3.2.0.zip" target="_blank" rel="noopener">https://github.com/Itseez/opencv/archive/3.2.0.zip</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install wget</span><br><span class="line">sudo wget https://github.com/Itseez/opencv/archive/3.2.0.zip</span><br></pre></td></tr></table></figure>

<p>下载完之后，在/home/(系统帐号名)目录下可以看到已下载的文件(我的是/home/yhan)</p>
<p><strong>2、解压ZIP源码文件</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install unzip</span><br><span class="line">sudo unzip 3.2.0.zip</span><br></pre></td></tr></table></figure>

<p><strong>3、进入源码目录，创建release目录</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd opencv-3.2.0</span><br><span class="line">mkdir release</span><br></pre></td></tr></table></figure>

<p><strong>4、安装依赖库</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install build-essential cmake libgtk2.0-dev pkg-config python-dev python-numpy libavcodec-dev libavformat-dev libswscale-dev</span><br></pre></td></tr></table></figure>

<p><strong>5、进入release目录</strong></p>
<p>​    安装OpenCV时，所有的文件都会被放到这个release目录下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd release</span><br></pre></td></tr></table></figure>

<p><strong>6、cmake编译OpenCV源码，安装所有的lib文件都会被安装到/usr/local/opencv3.2.0目录下</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cmake -D CMAKE_BUILD_TYPE=RELEASE -D CMAKE_INSTALL_PREFIX=/usr/local/opencv3.2.0 ..</span><br></pre></td></tr></table></figure>

<p><strong>7、安装</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo make install -j4</span><br></pre></td></tr></table></figure>



<h3 id="配置pkg-config"><a href="#配置pkg-config" class="headerlink" title="配置pkg-config"></a>配置pkg-config</h3><p><strong>1、创建pkgconfig目录</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir /usr/local/pkgconfig</span><br></pre></td></tr></table></figure>

<p><strong>2、拷贝opencv.pc文件到pkgconfig目录</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cp /usr/local/opencv3.2.0/lib/pkgconfig/opencv.pc /usr/local/pkgconfig/opencv3.2.pc</span><br></pre></td></tr></table></figure>

<p><strong>3.以管理员权限用vim打开bash</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo vim ~/.bashrc</span><br></pre></td></tr></table></figure>

<p><strong>4.在文件最后一行添加环境变量</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">PKG_CONFIG_PATH=$PKG_CONFIG_PATH:/usr/local/pkgconfig</span><br><span class="line">export PKG_CONFIG_PATH</span><br></pre></td></tr></table></figure>

<p><strong>5、wq保存文件后，source文件(执行脚本)</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">source ~/.bashrc</span><br></pre></td></tr></table></figure>

<p><strong>6.测试pkgconfig</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pkg-config --libs opencv3.2</span><br></pre></td></tr></table></figure>

<p>结果如下：</p>
<p><img src="/images/Ubuntu%E9%85%8D%E7%BD%AEpylon%E5%8F%8AOpenCV%E5%B9%B6%E6%8A%93%E5%8F%96%E5%9B%BE%E5%83%8F%E6%98%BE%E7%A4%BA/opencvpc.jpg" alt=""></p>
<blockquote>
<p>以上摘自<a href="https://blog.csdn.net/c406495762/article/details/62896035" target="_blank" rel="noopener">Ubuntu14.04安装OpenCV2.4.13(ZIP安装)</a></p>
</blockquote>
<h3 id="配置-conf文件"><a href="#配置-conf文件" class="headerlink" title="配置.conf文件"></a>配置.conf文件</h3><p>​    在后续测试中，出现<code>error while loading shared libraries: libopencv_core.so.X: cannot open shared object file: No such file</code>的错误，这是因为链接器ld提示找不到库文件。ld默认的目录是/lib和/usr/lib，如果放在其他路径也可以，需要让ld知道库文件所在的路径。若不知道该文件所在的路径，可以执行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo find / -name "libopencv_core.so.3.2*"</span><br></pre></td></tr></table></figure>

<p>​    解决方法：在/etc/ld.so.conf.d中配置.conf</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /etc/ld.so.conf.d/</span><br><span class="line">touch opencv.conf</span><br><span class="line">vim opencv.conf</span><br></pre></td></tr></table></figure>

<p>​    加入<code>/usr/local/opencv3.2.0/lib</code>即可。</p>
<p>​    最后执行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo ldconfig -v</span><br></pre></td></tr></table></figure>

<blockquote>
<p>引用<a href="https://blog.csdn.net/sean_xyz/article/details/40391869" target="_blank" rel="noopener">ubuntu opencv Error: cannot open shared object file: no such file or directory</a>与<a href="https://blog.csdn.net/qq_15505637/article/details/80064121" target="_blank" rel="noopener">OpenCV runtime error: “libopencv_core.so.3.2: cannot open shared object file: No such file or direct</a></p>
</blockquote>
<h3 id="安装Basler相机SDK"><a href="#安装Basler相机SDK" class="headerlink" title="安装Basler相机SDK"></a>安装Basler相机SDK</h3><p>参考本人博文：<a href="https://blog.csdn.net/qq_36024364/article/details/95470718" target="_blank" rel="noopener">Ubuntu环境下配置巴斯勒相机及相机测试</a></p>
<h3 id="配置-conf文件-1"><a href="#配置-conf文件-1" class="headerlink" title="配置.conf文件"></a>配置.conf文件</h3><p>​    同上</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /etc/ld.so.conf.d/</span><br><span class="line">touch pylon.conf</span><br><span class="line">vim pylon.conf</span><br></pre></td></tr></table></figure>

<p>​    加入<code>/opt/pylon5/lib64</code>后执行<code>sudo ldconfig -v</code></p>
<h3 id="编写测试代码"><a href="#编写测试代码" class="headerlink" title="编写测试代码"></a>编写测试代码</h3><p>代码摘自<a href="https://www.e-learn.cn/content/linux/1626816" target="_blank" rel="noopener">Linux系统调试basler Gige接口工业相机并用C++、OpenCV开发</a></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Grab.cpp</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *  Created on: 2018年11月30日</span></span><br><span class="line"><span class="comment"> *      Author: wenhan</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> saveImages 1</span></span><br><span class="line"><span class="comment">// Include files to use the PYLON API.</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pylon/PylonIncludes.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> PYLON_WIN_BUILD</span></span><br><span class="line"><span class="meta">#    <span class="meta-keyword">include</span> <span class="meta-string">&lt;pylon/PylonGUI.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/core/core.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/highgui/highgui.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/video/video.hpp&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Namespace for using pylon objects.</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> Pylon;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Namespace for using cout.</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Number of images to be grabbed.</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">uint32_t</span> c_countOfImagesToGrab = <span class="number">100</span>;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Mat src;</span><br><span class="line">	CImageFormatConverter formatConverter;</span><br><span class="line">    formatConverter.OutputPixelFormat = PixelType_BGR8packed;</span><br><span class="line">    <span class="keyword">int</span> grabbedlmages = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 创建一个Pylonlmage后续将用来创建OpenCV images</span></span><br><span class="line">    CPylonImage pylonImage;</span><br><span class="line">    <span class="comment">// The exit code of the sample application.</span></span><br><span class="line">    <span class="keyword">int</span> exitCode = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Before using any pylon methods, the pylon runtime must be initialized.</span></span><br><span class="line">    PylonInitialize();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// Create an instant camera object with the camera device found first.</span></span><br><span class="line">        <span class="function">CInstantCamera <span class="title">camera</span><span class="params">( CTlFactory::GetInstance().CreateFirstDevice())</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Print the model name of the camera.</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Using device "</span> &lt;&lt; camera.GetDeviceInfo().GetModelName() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// The parameter MaxNumBuffer can be used to control the count of buffers</span></span><br><span class="line">        <span class="comment">// allocated for grabbing. The default value of this parameter is 10.</span></span><br><span class="line">        camera.MaxNumBuffer = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Start the grabbing of c_countOfImagesToGrab images.</span></span><br><span class="line">        <span class="comment">// The camera device is parameterized with a default configuration which</span></span><br><span class="line">        <span class="comment">// sets up free-running continuous acquisition.</span></span><br><span class="line">        camera.StartGrabbing( c_countOfImagesToGrab);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// This smart pointer will receive the grab result data.</span></span><br><span class="line">        CGrabResultPtr ptrGrabResult;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Camera.StopGrabbing() is called automatically by the RetrieveResult() method</span></span><br><span class="line">        <span class="comment">// when c_countOfImagesToGrab images have been retrieved.</span></span><br><span class="line">        <span class="keyword">while</span> ( camera.IsGrabbing())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// Wait for an image and then retrieve it. A timeout of 5000 ms is used.</span></span><br><span class="line">            camera.RetrieveResult( <span class="number">5000</span>, ptrGrabResult, TimeoutHandling_ThrowException);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Image grabbed successfully?</span></span><br><span class="line">            <span class="keyword">if</span> (ptrGrabResult-&gt;GrabSucceeded())</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// Access the image data.</span></span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; <span class="string">"SizeX: "</span> &lt;&lt; ptrGrabResult-&gt;GetWidth() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; <span class="string">"SizeY: "</span> &lt;&lt; ptrGrabResult-&gt;GetHeight() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">                formatConverter.Convert(pylonImage, ptrGrabResult);</span><br><span class="line">                src = cv::Mat(ptrGrabResult-&gt;GetHeight(), ptrGrabResult-&gt;GetWidth(), CV_8UC3, (<span class="keyword">uint8_t</span> *) pylonImage.GetBuffer());</span><br><span class="line">                <span class="comment">//如果需要保存图片</span></span><br><span class="line">                <span class="keyword">if</span> (saveImages)</span><br><span class="line">                &#123;</span><br><span class="line">                   <span class="built_in">std</span>::<span class="built_in">ostringstream</span> s;</span><br><span class="line">                    <span class="comment">// 按索引定义文件名存储图片</span></span><br><span class="line">                   s &lt;&lt; <span class="string">"/home/wenhan/img/image_"</span> &lt;&lt; grabbedlmages &lt;&lt; <span class="string">".jpg"</span>;</span><br><span class="line">                   <span class="built_in">std</span>::<span class="function"><span class="built_in">string</span> <span class="title">imageName</span><span class="params">(s.str())</span></span>;</span><br><span class="line">                    <span class="comment">//保存OpenCV image.</span></span><br><span class="line">                   imwrite(imageName, src);</span><br><span class="line">                   grabbedlmages++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//新建OpenCV display window.</span></span><br><span class="line">                namedWindow(<span class="string">"OpenCV Display Window"</span>, CV_WINDOW_NORMAL); <span class="comment">// other options: CV_AUTOSIZE, CV_FREERATIO</span></span><br><span class="line">                <span class="comment">//显示及时影像.</span></span><br><span class="line">                imshow(<span class="string">"OpenCV Display Window"</span>, src);</span><br><span class="line">                waitKey(<span class="number">1</span>);</span><br><span class="line">                <span class="keyword">const</span> <span class="keyword">uint8_t</span> *pImageBuffer = (<span class="keyword">uint8_t</span> *) ptrGrabResult-&gt;GetBuffer();</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; <span class="string">"Gray value of first pixel: "</span> &lt;&lt; (<span class="keyword">uint32_t</span>) pImageBuffer[<span class="number">0</span>] &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> PYLON_WIN_BUILD</span></span><br><span class="line">                <span class="comment">// Display the grabbed image.</span></span><br><span class="line">                Pylon::DisplayImage(<span class="number">1</span>, ptrGrabResult);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; <span class="string">"Error: "</span> &lt;&lt; ptrGrabResult-&gt;GetErrorCode() &lt;&lt; <span class="string">" "</span> &lt;&lt; ptrGrabResult-&gt;GetErrorDescription() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (<span class="keyword">const</span> GenericException &amp;e)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// Error handling.</span></span><br><span class="line">        <span class="built_in">cerr</span> &lt;&lt; <span class="string">"An exception occurred."</span> &lt;&lt; <span class="built_in">endl</span></span><br><span class="line">        &lt;&lt; e.GetDescription() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        exitCode = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Comment the following two lines to disable waiting on exit.</span></span><br><span class="line">    <span class="built_in">cerr</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="string">"Press Enter to exit."</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">while</span>( <span class="built_in">cin</span>.<span class="built_in">get</span>() != <span class="string">'\n'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Releases all pylon resources.</span></span><br><span class="line">    PylonTerminate();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> exitCode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<pre><code>qt creator新建项目，将上面代码加入至main.c中，并在.pro文件中添加如下</code></pre><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">INCLUDEPATH</span> <span class="string">+= /usr/local/opencv3.2.0/include \</span></span><br><span class="line"><span class="meta">/usr/local/opencv3.2.0/include/opencv</span> <span class="string">\</span></span><br><span class="line"><span class="meta">/usr/local/opencv3.2.0/include/opencv2</span> <span class="string">\</span></span><br><span class="line"><span class="meta">/opt/pylon5/include</span> <span class="string">\</span></span><br><span class="line"><span class="attr">/opt/pylon5/include/pylon</span></span><br><span class="line"></span><br><span class="line"><span class="attr">LIBS</span> <span class="string">+= /usr/local/opencv3.2.0/lib/libopencv_calib3d.so \</span></span><br><span class="line"><span class="meta">/usr/local/opencv3.2.0/lib/libopencv_calib3d.so.3.2.0</span> <span class="string">\</span></span><br><span class="line"><span class="meta">/usr/local/opencv3.2.0/lib/libopencv_calib3d.so.3.2.0</span> <span class="string">\</span></span><br><span class="line"><span class="meta">/usr/local/opencv3.2.0/lib/libopencv_core.so</span> <span class="string">\</span></span><br><span class="line"><span class="meta">/usr/local/opencv3.2.0/lib/libopencv_core.so.3.2</span> <span class="string">\</span></span><br><span class="line"><span class="meta">/usr/local/opencv3.2.0/lib/libopencv_core.so.3.2.0</span> <span class="string">\</span></span><br><span class="line"><span class="meta">/usr/local/opencv3.2.0/lib/libopencv_features2d.so</span> <span class="string">\</span></span><br><span class="line"><span class="meta">/usr/local/opencv3.2.0/lib/libopencv_features2d.so.3.2</span> <span class="string">\</span></span><br><span class="line"><span class="meta">/usr/local/opencv3.2.0/lib/libopencv_features2d.so.3.2.0</span> <span class="string">\</span></span><br><span class="line"><span class="meta">/usr/local/opencv3.2.0/lib/libopencv_flann.so</span> <span class="string">\</span></span><br><span class="line"><span class="meta">/usr/local/opencv3.2.0/lib/libopencv_flann.so.3.2</span> <span class="string">\</span></span><br><span class="line"><span class="meta">/usr/local/opencv3.2.0/lib/libopencv_flann.so.3.2.0</span> <span class="string">\</span></span><br><span class="line"><span class="meta">/usr/local/opencv3.2.0/lib/libopencv_highgui.so</span> <span class="string">\</span></span><br><span class="line"><span class="meta">/usr/local/opencv3.2.0/lib/libopencv_highgui.so.3.2</span> <span class="string">\</span></span><br><span class="line"><span class="meta">/usr/local/opencv3.2.0/lib/libopencv_highgui.so.3.2.0</span> <span class="string">\</span></span><br><span class="line"><span class="meta">/usr/local/opencv3.2.0/lib/libopencv_imgcodecs.so</span> <span class="string">\</span></span><br><span class="line"><span class="meta">/usr/local/opencv3.2.0/lib/libopencv_imgcodecs.so.3.2</span> <span class="string">\</span></span><br><span class="line"><span class="meta">/usr/local/opencv3.2.0/lib/libopencv_imgcodecs.so.3.2.0</span> <span class="string">\</span></span><br><span class="line"><span class="meta">/usr/local/opencv3.2.0/lib/libopencv_imgproc.so</span> <span class="string">\</span></span><br><span class="line"><span class="meta">/usr/local/opencv3.2.0/lib/libopencv_imgproc.so.3.2</span> <span class="string">\</span></span><br><span class="line"><span class="meta">/usr/local/opencv3.2.0/lib/libopencv_imgproc.so.3.2.0</span> <span class="string">\</span></span><br><span class="line"><span class="meta">/usr/local/opencv3.2.0/lib/libopencv_ml.so</span> <span class="string">\</span></span><br><span class="line"><span class="meta">/usr/local/opencv3.2.0/lib/libopencv_ml.so.3.2</span> <span class="string">\</span></span><br><span class="line"><span class="meta">/usr/local/opencv3.2.0/lib/libopencv_ml.so.3.2.0</span> <span class="string">\</span></span><br><span class="line"><span class="meta">/usr/local/opencv3.2.0/lib/libopencv_objdetect.so</span> <span class="string">\</span></span><br><span class="line"><span class="meta">/usr/local/opencv3.2.0/lib/libopencv_objdetect.so.3.2</span> <span class="string">\</span></span><br><span class="line"><span class="meta">/usr/local/opencv3.2.0/lib/libopencv_objdetect.so.3.2.0</span> <span class="string">\</span></span><br><span class="line"><span class="meta">/usr/local/opencv3.2.0/lib/libopencv_photo.so</span> <span class="string">\</span></span><br><span class="line"><span class="meta">/usr/local/opencv3.2.0/lib/libopencv_photo.so.3.2</span> <span class="string">\</span></span><br><span class="line"><span class="meta">/usr/local/opencv3.2.0/lib/libopencv_photo.so.3.2.0</span> <span class="string">\</span></span><br><span class="line"><span class="meta">/usr/local/opencv3.2.0/lib/libopencv_shape.so</span> <span class="string">\</span></span><br><span class="line"><span class="meta">/usr/local/opencv3.2.0/lib/libopencv_shape.so.3.2</span> <span class="string">\</span></span><br><span class="line"><span class="meta">/usr/local/opencv3.2.0/lib/libopencv_shape.so.3.2.0</span> <span class="string">\</span></span><br><span class="line"><span class="meta">/usr/local/opencv3.2.0/lib/libopencv_stitching.so</span> <span class="string">\</span></span><br><span class="line"><span class="meta">/usr/local/opencv3.2.0/lib/libopencv_stitching.so.3.2</span> <span class="string">\</span></span><br><span class="line"><span class="meta">/usr/local/opencv3.2.0/lib/libopencv_stitching.so.3.2.0</span> <span class="string">\</span></span><br><span class="line"><span class="meta">/usr/local/opencv3.2.0/lib/libopencv_superres.so</span> <span class="string">\</span></span><br><span class="line"><span class="meta">/usr/local/opencv3.2.0/lib/libopencv_superres.so.3.2</span> <span class="string">\</span></span><br><span class="line"><span class="meta">/usr/local/opencv3.2.0/lib/libopencv_superres.so.3.2.0</span> <span class="string">\</span></span><br><span class="line"><span class="meta">/usr/local/opencv3.2.0/lib/libopencv_video.so</span> <span class="string">\</span></span><br><span class="line"><span class="meta">/usr/local/opencv3.2.0/lib/libopencv_video.so.3.2</span> <span class="string">\</span></span><br><span class="line"><span class="meta">/usr/local/opencv3.2.0/lib/libopencv_video.so.3.2.0</span> <span class="string">\</span></span><br><span class="line"><span class="meta">/usr/local/opencv3.2.0/lib/libopencv_videoio.so</span> <span class="string">\</span></span><br><span class="line"><span class="meta">/usr/local/opencv3.2.0/lib/libopencv_videoio.so.3.2</span> <span class="string">\</span></span><br><span class="line"><span class="meta">/usr/local/opencv3.2.0/lib/libopencv_videoio.so.3.2.0</span> <span class="string">\</span></span><br><span class="line"><span class="meta">/usr/local/opencv3.2.0/lib/libopencv_videostab.so</span> <span class="string">\</span></span><br><span class="line"><span class="meta">/usr/local/opencv3.2.0/lib/libopencv_videostab.so.3.2</span> <span class="string">\</span></span><br><span class="line"><span class="meta">/usr/local/opencv3.2.0/lib/libopencv_videostab.so.3.2.0</span> <span class="string">\</span></span><br><span class="line"><span class="meta">/opt/pylon5/lib64/libbxapi-5.2.0.so</span> <span class="string">\</span></span><br><span class="line"><span class="meta">/opt/pylon5/lib64/libbxapi.so</span> <span class="string">\</span></span><br><span class="line"><span class="meta">/opt/pylon5/lib64/libFirmwareUpdate_gcc_v3_1_Basler_pylon_v5_1.so</span> <span class="string">\</span></span><br><span class="line"><span class="meta">/opt/pylon5/lib64/libGCBase_gcc_v3_1_Basler_pylon_v5_1.so</span> <span class="string">\</span></span><br><span class="line"><span class="meta">/opt/pylon5/lib64/libGCBase_gcc_v3_1_Basler_pylon.so</span> <span class="string">\</span></span><br><span class="line"><span class="meta">/opt/pylon5/lib64/libGenApi_gcc_v3_1_Basler_pylon_v5_1.so</span> <span class="string">\</span></span><br><span class="line"><span class="meta">/opt/pylon5/lib64/libGenApi_gcc_v3_1_Basler_pylon.so</span> <span class="string">\</span></span><br><span class="line"><span class="meta">/opt/pylon5/lib64/libgxapi-5.2.0.so</span> <span class="string">\</span></span><br><span class="line"><span class="meta">/opt/pylon5/lib64/libgxapi.so</span> <span class="string">\</span></span><br><span class="line"><span class="meta">/opt/pylon5/lib64/liblog4cpp_gcc_v3_1_Basler_pylon_v5_1.so</span> <span class="string">\</span></span><br><span class="line"><span class="meta">/opt/pylon5/lib64/libLog_gcc_v3_1_Basler_pylon_v5_1.so</span> <span class="string">\</span></span><br><span class="line"><span class="meta">/opt/pylon5/lib64/libLog_gcc_v3_1_Basler_pylon.so</span> <span class="string">\</span></span><br><span class="line"><span class="meta">/opt/pylon5/lib64/libMathParser_gcc_v3_1_Basler_pylon_v5_1.so</span> <span class="string">\</span></span><br><span class="line"><span class="meta">/opt/pylon5/lib64/libMathParser_gcc_v3_1_Basler_pylon.so</span> <span class="string">\</span></span><br><span class="line"><span class="meta">/opt/pylon5/lib64/libNodeMapData_gcc_v3_1_Basler_pylon_v5_1.so</span> <span class="string">\</span></span><br><span class="line"><span class="meta">/opt/pylon5/lib64/libNodeMapData_gcc_v3_1_Basler_pylon.so</span> <span class="string">\</span></span><br><span class="line"><span class="meta">/opt/pylon5/lib64/libpylonbase-5.2.0.so</span> <span class="string">\</span></span><br><span class="line"><span class="meta">/opt/pylon5/lib64/libpylonbase.so</span> <span class="string">\</span></span><br><span class="line"><span class="meta">/opt/pylon5/lib64/libpylonc-5.2.0.so</span> <span class="string">\</span></span><br><span class="line"><span class="meta">/opt/pylon5/lib64/libpylonc.so</span> <span class="string">\</span></span><br><span class="line"><span class="meta">/opt/pylon5/lib64/libpylon_TL_bcon-5.2.0.so</span> <span class="string">\</span></span><br><span class="line"><span class="meta">/opt/pylon5/lib64/libpylon_TL_bcon.so</span> <span class="string">\</span></span><br><span class="line"><span class="meta">/opt/pylon5/lib64/libpylon_TL_camemu-5.2.0.so</span> <span class="string">\</span></span><br><span class="line"><span class="meta">/opt/pylon5/lib64/libpylon_TL_camemu.so</span> <span class="string">\</span></span><br><span class="line"><span class="meta">/opt/pylon5/lib64/libpylon_TL_gige-5.2.0.so</span> <span class="string">\</span></span><br><span class="line"><span class="meta">/opt/pylon5/lib64/libpylon_TL_gige.so</span> <span class="string">\</span></span><br><span class="line"><span class="meta">/opt/pylon5/lib64/libpylon_TL_usb-5.2.0.so</span> <span class="string">\</span></span><br><span class="line"><span class="meta">/opt/pylon5/lib64/libpylon_TL_usb.so</span> <span class="string">\</span></span><br><span class="line"><span class="meta">/opt/pylon5/lib64/libpylonutility-5.2.0.so</span> <span class="string">\</span></span><br><span class="line"><span class="meta">/opt/pylon5/lib64/libpylonutility.so</span> <span class="string">\</span></span><br><span class="line"><span class="meta">/opt/pylon5/lib64/libuxapi-5.2.0.so</span> <span class="string">\</span></span><br><span class="line"><span class="meta">/opt/pylon5/lib64/libuxapi.so</span> <span class="string">\</span></span><br><span class="line"><span class="meta">/opt/pylon5/lib64/libXmlParser_gcc_v3_1_Basler_pylon_v5_1.so</span> <span class="string">\</span></span><br><span class="line"><span class="meta">/opt/pylon5/lib64/libXmlParser_gcc_v3_1_Basler_pylon.so</span> <span class="string">\</span></span><br></pre></td></tr></table></figure>

<p>​    <code>INCLUDEPATH</code>为第三方库的路径，<code>LIBS</code>为动态连接库路径。</p>
<p>​    编译并执行项目，结果如下:</p>
<p><img src="/images/Ubuntu%E9%85%8D%E7%BD%AEpylon%E5%8F%8AOpenCV%E5%B9%B6%E6%8A%93%E5%8F%96%E5%9B%BE%E5%83%8F%E6%98%BE%E7%A4%BA/TestResult.jpg" alt=""></p>
<p>​    测试结束。</p>
]]></content>
      <categories>
        <category>Camera Config</category>
      </categories>
      <tags>
        <tag>basler</tag>
        <tag>OpenCV</tag>
      </tags>
  </entry>
</search>
